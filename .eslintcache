[{"C:\\Users\\RITIKA\\Documents\\better-imdb\\my-app\\src\\index.js":"1","C:\\Users\\RITIKA\\Documents\\better-imdb\\my-app\\src\\App.js":"2","C:\\Users\\RITIKA\\Documents\\better-imdb\\my-app\\src\\reportWebVitals.js":"3","C:\\Users\\RITIKA\\Documents\\better-imdb\\my-app\\src\\reducer\\reducer.js":"4","C:\\Users\\RITIKA\\Documents\\better-imdb\\my-app\\src\\core.js\\home.js":"5","C:\\Users\\RITIKA\\Documents\\better-imdb\\my-app\\src\\core.js\\signin.js":"6","C:\\Users\\RITIKA\\Documents\\better-imdb\\my-app\\src\\actions.js\\actions.js":"7","C:\\Users\\RITIKA\\Documents\\better-imdb\\my-app\\src\\MoviesContainer\\MoviesContainer.js":"8","C:\\Users\\RITIKA\\Documents\\better-imdb\\my-app\\src\\MoviesContainer\\SingleMovie.js":"9","C:\\Users\\RITIKA\\Documents\\better-imdb\\my-app\\src\\main.js":"10","C:\\Users\\RITIKA\\Documents\\better-imdb\\my-app\\src\\spinner.js":"11","C:\\Users\\RITIKA\\Documents\\better-imdb\\my-app\\src\\navbar.js":"12","C:\\Users\\RITIKA\\Documents\\better-imdb\\my-app\\src\\MoviesContainer\\SingleMovieContainer.js":"13","C:\\Users\\RITIKA\\Documents\\better-imdb\\my-app\\src\\WatchList.js":"14"},{"size":437,"mtime":1608034427573,"results":"15","hashOfConfig":"16"},{"size":2995,"mtime":1608900995828,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"16"},{"size":2089,"mtime":1609012046877,"results":"19","hashOfConfig":"16"},{"size":2587,"mtime":1608835627852,"results":"20","hashOfConfig":"16"},{"size":699,"mtime":1610889644815,"results":"21","hashOfConfig":"16"},{"size":1231,"mtime":1608932869355,"results":"22","hashOfConfig":"16"},{"size":1879,"mtime":1608932659607,"results":"23","hashOfConfig":"16"},{"size":1680,"mtime":1609008242375,"results":"24","hashOfConfig":"16"},{"size":410,"mtime":1608034923741,"results":"25","hashOfConfig":"16"},{"size":298,"mtime":1608054835898,"results":"26","hashOfConfig":"16"},{"size":1245,"mtime":1609013300671,"results":"27","hashOfConfig":"16"},{"size":2681,"mtime":1609008245473,"results":"28","hashOfConfig":"16"},{"size":1007,"mtime":1608932862762,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"esgivd",{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"32"},"C:\\Users\\RITIKA\\Documents\\better-imdb\\my-app\\src\\index.js",[],["65","66"],"C:\\Users\\RITIKA\\Documents\\better-imdb\\my-app\\src\\App.js",["67","68","69"],"import React,{useState} from \"react\";\nimport { Provider } from \"react-redux\";\nimport { createStore,applyMiddleware , compose } from \"redux\";\nimport thunk from \"redux-thunk\"\nimport reducer from \"./reducer/reducer\"\nimport Home from \"./core.js/home\"\nimport Signin from \"./core.js/signin\"\nimport { BrowserRouter as Router, Link, Switch, Route , Redirect, BrowserRouter} from \"react-router-dom\"\nimport SingleMovie from \"./MoviesContainer/SingleMovie\"\nimport Main from \"./main\"\nimport Navbar from \"./navbar\"\nimport WatchList from \"./WatchList\"\n\nconst App = (props) => {\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__  || compose ;\n  const Store = createStore(reducer,composeEnhancers(applyMiddleware(thunk)));\n\n  const [values,setValues] = useState({\n    email : \"\",\n    password : \"\",\n    isLoggedIn : null\n})\n\nconst {email,password,isLoggedIn} = values\n\nconst handleChange = (name) => e => {\n\n    setValues({...values,\n    [name] : e.target.value\n    })\n\n\n}\n\nconst handleClick = () =>{\n    if(email !== \"\" && password !== \"\" ){\n    setValues({\n        ...values,\n        isLoggedIn : true\n    })\n   \n}else{\n    setValues({\n        ...values,\n        isLoggedIn : false\n    })\n}\n\nconsole.log(values)\n}\n\nconst logout = () => {\n  setValues({\n    email : \"\",\n    password : \"\",\n    isLoggedIn : false\n  })\n}\n\n \n  return (\n\n    \n\n   \n    <Provider store={Store}>\n  \n      <Router>\n\n\n       {/* { !isLoggedIn  && <Link to = \"/\" > Sign in  </Link> }\n        <Link to = \"/home\" > Home </Link>  */}\n      \n      <Navbar isLoggedIn = {isLoggedIn} name = {email} logout = {logout}/>\n\n\n\n        \n      <div>\n          <Switch>\n           \n            {/* <Route exact path=\"/\" render ={ () =>  {  if(isLoggedIn) { return <Home name = {email} isLoggedIn={isLoggedIn}/> } else { return <Redirect to =\"/signin\" />   }   }  } />\n            <Route exact path =\"/signin\" render = { () => { if(isLoggedIn){ return  <Home  name = {email}/>   } return <Signin handleChange={handleChange}\n             handleClick={handleClick}\n             email = {email} \n             password = {password}\n             values = {values}\n             />  }  }  /> */}\n              \n             <Route exact path = \"/\" render ={ () => {  return <Home email = {email}  logout= {logout} isLoggedIn = {isLoggedIn}  />     }  }   />\n             <Route exact path = \"/login\"  render = { () => { if(isLoggedIn){ return <Redirect to=\"/\" /> } return <Signin  handleChange={handleChange}\n             handleClick={handleClick}\n             email = {email} \n             password = {password}\n             values = {values}\n             />   }   } />\n            <Route exact path =\"/movie/:id\"    render = {  (props) => {  return <SingleMovie {...props} isLoggedIn = {isLoggedIn}  />     }  }            />\n            <Route  exact path = \"/movies/watchList\" render = {  () => { return  <WatchList /> }  } />\n          </Switch>\n          </div>\n      \n      </Router>\n\n\n    </Provider>\n\n  );\n}\n\nexport default App;\n","C:\\Users\\RITIKA\\Documents\\better-imdb\\my-app\\src\\reportWebVitals.js",[],"C:\\Users\\RITIKA\\Documents\\better-imdb\\my-app\\src\\reducer\\reducer.js",["70"],"const state = {\r\n\r\n    movieName : \"\",\r\n    movies : [] ,\r\n    movieDetails : [],\r\n    loading : \"\",\r\n    wishList : []\r\n\r\n}\r\n\r\n const reducer = (storeState = state  , actions  ) => {\r\n\r\n    if(actions.type === \"Movies\"){\r\n        return {\r\n            ...storeState,\r\n            movies : actions.payload,\r\n            loading : false\r\n        }\r\n\r\n    }\r\n\r\n    if(actions.type === \"loading\"){\r\n        return {\r\n            ...storeState,\r\n            loading : true\r\n        }\r\n    }\r\n\r\n    if(actions.type === \"null\"){\r\n        return {\r\n            ...storeState,\r\n            loading : null\r\n        }\r\n    }\r\n\r\n    if(actions.type === \"clear_Movie\"){\r\n        return {\r\n            ...storeState,\r\n            movieDetails : [],\r\n            loading : false\r\n        }\r\n\r\n    }\r\n\r\n    if(actions.type === \"clear_Movies\"){\r\n \r\n        return {\r\n            ...storeState,\r\n            movies : [] \r\n        }\r\n\r\n    }\r\n\r\n    if(actions.type === \"SingleMovie\"){\r\n        return{\r\n            ...storeState,\r\n            movieDetails : actions.payload,\r\n            loading : false\r\n        }\r\n    }\r\n    if(actions.type === \"movieName\"){\r\n        return {\r\n            ...storeState,\r\n            movieName : actions.payload\r\n        }\r\n\r\n    }\r\n\r\n    if(actions.type === \"remove\"){\r\n        const take = actions.payload;\r\n        const sState = [...storeState.wishList]\r\n       const removedWish =  sState.filter( (item,i) =>  { return i !== take  } );\r\n       return {\r\n           ...storeState,\r\n           wishList : removedWish\r\n       } \r\n\r\n    }\r\n\r\n    if(actions.type === \"watchList\"){\r\n\r\n        let take = actions.payload\r\n\r\n        let newList = [...storeState.wishList]\r\n\r\n        const title = take.Title;\r\n        \r\n     const final =   newList.find(  item =>  item.Title === take.Title );\r\n        \r\n        if(final === undefined){\r\n       newList.push(take)\r\n        }\r\n        \r\n\r\n        take = \"\"\r\n        \r\n        return {\r\n            ...storeState,\r\n            wishList : newList\r\n        }\r\n\r\n    }\r\n\r\n    return storeState;\r\n\r\n}\r\n\r\n\r\nexport default reducer;","C:\\Users\\RITIKA\\Documents\\better-imdb\\my-app\\src\\core.js\\home.js",["71","72","73","74","75"],"import React,{useState,useEffect} from 'react'\r\nimport {connect} from \"react-redux\"\r\nimport {call_movies, movie_Name,setLoading,clear_It, singleMovie,sendingToWishList} from \"../actions.js/actions\"\r\nimport MoviesContainer from \"../MoviesContainer/MoviesContainer\"\r\nimport Spinner from \"../spinner\";\r\nimport SingleMovie from \"../MoviesContainer/SingleMovie\"\r\n\r\n\r\n  \r\nconst Home = (props)  =>{\r\n\r\n    const [wishMovies,SetwishMovies] = useState(\"\")\r\n    \r\n\r\n    useEffect( () => {\r\n\r\n        console.log(!props.loading  ? \"true\" : \"false\" )\r\n        // props.clear_It(\"clear_Movies\")\r\n        return () => {\r\n            console.log(\"called in clear movies\")\r\n            // props.clear_It(\"clear_Movies\")  \r\n        }\r\n        \r\n    } , [])\r\n\r\n    const storingInWishState = (data) => {\r\n\r\n        console.log(data);\r\n\r\n        props.sendingToWishList(data)\r\n\r\n    }\r\n\r\n\r\n    const calling_movies = (text) => {\r\n        props.setLoading()\r\n        props.call_movies(text);\r\n        \r\n      \r\n        \r\n       \r\n    }\r\n\r\n    const handleValue = (e) => {\r\n\r\n       \r\n        props.movie_Name(e.target.value)\r\n\r\n    }\r\n\r\n    \r\n    return (\r\n        <div>\r\n          \r\n            {/* { props.isLoggedIn && \r\n            <h1>Welcome  {props.email}  </h1>\r\n} */}\r\n          \r\n\r\n            <div className=\"conatiner\">\r\n               <div className=\"p-6\">\r\n           <input\r\n              \r\n              type=\"text\"\r\n              name=\"searchText\"\r\n              placeholder=\"Search Movies, TV Series ...\"\r\n              onChange={handleValue}\r\n            />\r\n            <button onClick = { () =>   {  calling_movies(props.movieName) }} type=\"submit\" className=\"btn btn-primary btn-bg \">\r\n              Search\r\n            </button>\r\n            </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n\r\n            {  props.loading === false  && ( \r\n              \r\n                props.movies.Search.map( item =>                        \r\n                <MoviesContainer storingInWishState={storingInWishState} isLoggedIn = {props.isLoggedIn} item = {item} /> \r\n               \r\n                \r\n                ) ) }\r\n                {props.loading === true ? (\r\n                    <div>\r\n                     <Spinner />\r\n\r\n                     </div>\r\n                ) : \"\"\r\n                }\r\n                </div>\r\n                \r\n                \r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n        return state \r\n\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,{call_movies, movie_Name,clear_It,setLoading,sendingToWishList   })(Home)\r\n\r\n","C:\\Users\\RITIKA\\Documents\\better-imdb\\my-app\\src\\core.js\\signin.js",["76"],"C:\\Users\\RITIKA\\Documents\\better-imdb\\my-app\\src\\actions.js\\actions.js",[],"C:\\Users\\RITIKA\\Documents\\better-imdb\\my-app\\src\\MoviesContainer\\MoviesContainer.js",["77"],"import React,{useState} from 'react'\r\nimport {Link} from \"react-router-dom\"\r\nimport \"../style.css\"\r\n\r\nfunction MoviesContainer(props) {\r\n\r\n  const [styles,setStyle] = useState({style : \"btn btn-warning\" , Message : \"Add to Watch List\" });\r\n\r\n  const {style,Message} = styles;\r\n  \r\n  return    (   <div className = \"MoviesContainer col-md-3 mb-5\">\r\n           <div className=\"card card-body bg-dark text-center h-100\">\r\n        <img className=\"w-60 mb-2\" src = {`${props.item.Poster}`}   />\r\n        <p className=\"text-light card-title\">  Tiltle : {props.item.Title}  </p>\r\n        <p className=\"text-light card-title\">  Type : {props.item.Type}  </p>\r\n        {props.item.Runtime  && ( \r\n          <React.Fragment>\r\n        <p className=\"text-light card-title\">  Run Time  : {props.item.Runtime}  </p>\r\n        <p className=\"text-light card-title\"> Genre  : {props.item.Genre}  </p>\r\n        <p className=\"text-light card-title\"> Released  : {props.item.Released}  </p>\r\n        \r\n        </React.Fragment>\r\n        )         \r\n        }\r\n      { !props.watchlist ?  <Link className = {style} onClick = { () =>    props.isLoggedIn === false || props.isLoggedIn === null ? alert(\"Sign in to add it in your wish list\") :\r\n       <div> {setStyle({style : \"btn btn-success\",Message : \"Added to Watch List\"})}  {props.storingInWishState(props.item)}  </div>    }  > {Message} </Link >  : \r\n      <Link  onClick = { () => { props.removeFromWatchList(props.i)    }  }  className = \"btn btn-danger\"> Remove from watch List  </Link>\r\n      }\r\n        <br></br>\r\n        { !props.Runtime ? \r\n        <Link className=\"btn btn-primary\"  to={`/movie/${props.item.imdbID}`} > More details <i className=\"fas fa-chevron-right\" />  </Link> :\r\n        <Link className=\"btn btn-success\"  to=\"/\" > Home Page   </Link>\r\n        }\r\n        </div>\r\n    </div> )\r\n\r\n}\r\n\r\nexport default MoviesContainer\r\n","C:\\Users\\RITIKA\\Documents\\better-imdb\\my-app\\src\\MoviesContainer\\SingleMovie.js",["78","79","80","81"],"import React,{useEffect,useState} from 'react'\r\nimport axios from \"axios\"\r\nimport {connect} from \"react-redux\"\r\nimport {singleMovie,clear_It,setLoading,setLoadingNull,sendingToWishList} from \"../actions.js/actions\"\r\nimport MoviesContainer from './MoviesContainer'\r\nimport SingleMovieContainer from \"./SingleMovieContainer\"\r\nimport Spinner from \"../spinner\";\r\n\r\nconst  SingleMovie =(props) => {\r\n\r\n        useEffect( () => {\r\n            props.setLoading();\r\n            props.singleMovie(props.match.params.id);\r\n           \r\n\r\n            return () =>{\r\n               \r\n                props.clear_It(\"clear_Movie\")\r\n               \r\n            }\r\n\r\n        } , [] )\r\n\r\n        const storingInWishState = (data) => {\r\n\r\n            console.log(data);\r\n    \r\n            props.sendingToWishList(data)\r\n    \r\n        }\r\n        \r\n        const {Title,Type,Poster,Runtime,Genre,Writer,Actors,Released,imdbID,Rated,Director,imdbRating} = props.movieDetails\r\n\r\n    return (\r\n        <div>\r\n            {props.loading  ?  <Spinner /> : <SingleMovieContainer  Title = {Title}  Type = {Type} Poster = {Poster} imdbID = {imdbID}\r\n             Runtime = {Runtime} Genre = {Genre}  Writer ={Writer}  Actors = {Actors} isLoggedIn = {props.isLoggedIn}\r\n              Released = {Released} Rated = {Rated}  storingInWishState = {storingInWishState} Director = {Director} imdbRating = {imdbRating} item = {props.movieDetails} /> }\r\n            {/* {!props.laoding ?     : \"\" } */}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n    return state\r\n}\r\n\r\nexport default connect(mapStateToProps,{singleMovie,clear_It,setLoading,setLoadingNull,sendingToWishList})(SingleMovie)","C:\\Users\\RITIKA\\Documents\\better-imdb\\my-app\\src\\main.js",[],"C:\\Users\\RITIKA\\Documents\\better-imdb\\my-app\\src\\spinner.js",[],"C:\\Users\\RITIKA\\Documents\\better-imdb\\my-app\\src\\navbar.js",[],"C:\\Users\\RITIKA\\Documents\\better-imdb\\my-app\\src\\MoviesContainer\\SingleMovieContainer.js",[],"C:\\Users\\RITIKA\\Documents\\better-imdb\\my-app\\src\\WatchList.js",["82","83"],"import {React,useEffect} from 'react'\r\nimport {connect} from \"react-redux\"\r\nimport MoviesContainer from \"./MoviesContainer/MoviesContainer\"\r\nimport {removeWishAction} from \"./actions.js/actions\"\r\n\r\nconst WatchList = (props)  => {\r\n\r\n    let list = []\r\n\r\n      console.log(\"called in watchlist\")\r\n\r\n        useEffect(() => {\r\n            \r\n            list = props.wishList;\r\n\r\n            console.log(\"called in useeffect\", props);\r\n            \r\n        }, [])\r\n\r\n        const removeFromWatchList = (index) => {\r\n                \r\n            props.removeWishAction(index);\r\n        }\r\n    \r\n    return (\r\n    \r\n        <div className=\"row\">\r\n\r\n        {props.wishList.map( (item,i) => { return <MoviesContainer item={item} i = {i} removeFromWatchList={removeFromWatchList} \r\n        \r\n        watchlist = {\"wer\"}   />  }   )} \r\n        \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n    return state\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps,{removeWishAction})(WatchList)\r\n",{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":8,"column":35,"nodeType":"90","messageId":"91","endLine":8,"endColumn":39},{"ruleId":"88","severity":1,"message":"92","line":8,"column":67,"nodeType":"90","messageId":"91","endLine":8,"endColumn":80},{"ruleId":"88","severity":1,"message":"93","line":10,"column":8,"nodeType":"90","messageId":"91","endLine":10,"endColumn":12},{"ruleId":"88","severity":1,"message":"94","line":86,"column":15,"nodeType":"90","messageId":"91","endLine":86,"endColumn":20},{"ruleId":"88","severity":1,"message":"95","line":3,"column":54,"nodeType":"90","messageId":"91","endLine":3,"endColumn":65},{"ruleId":"88","severity":1,"message":"96","line":6,"column":8,"nodeType":"90","messageId":"91","endLine":6,"endColumn":19},{"ruleId":"88","severity":1,"message":"97","line":12,"column":12,"nodeType":"90","messageId":"91","endLine":12,"endColumn":22},{"ruleId":"88","severity":1,"message":"98","line":12,"column":23,"nodeType":"90","messageId":"91","endLine":12,"endColumn":36},{"ruleId":"99","severity":1,"message":"100","line":24,"column":9,"nodeType":"101","endLine":24,"endColumn":11,"suggestions":"102"},{"ruleId":"88","severity":1,"message":"103","line":1,"column":15,"nodeType":"90","messageId":"91","endLine":1,"endColumn":23},{"ruleId":"104","severity":1,"message":"105","line":13,"column":9,"nodeType":"106","endLine":13,"endColumn":71},{"ruleId":"88","severity":1,"message":"103","line":1,"column":25,"nodeType":"90","messageId":"91","endLine":1,"endColumn":33},{"ruleId":"88","severity":1,"message":"107","line":2,"column":8,"nodeType":"90","messageId":"91","endLine":2,"endColumn":13},{"ruleId":"88","severity":1,"message":"108","line":5,"column":8,"nodeType":"90","messageId":"91","endLine":5,"endColumn":23},{"ruleId":"99","severity":1,"message":"109","line":22,"column":13,"nodeType":"101","endLine":22,"endColumn":15,"suggestions":"110"},{"ruleId":"88","severity":1,"message":"111","line":14,"column":13,"nodeType":"90","messageId":"91","endLine":14,"endColumn":17},{"ruleId":"99","severity":1,"message":"112","line":14,"column":20,"nodeType":"113","endLine":14,"endColumn":34},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'BrowserRouter' is defined but never used.","'Main' is defined but never used.","'title' is assigned a value but never used.","'singleMovie' is defined but never used.","'SingleMovie' is defined but never used.","'wishMovies' is assigned a value but never used.","'SetwishMovies' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.loading'. Either include it or remove the dependency array.","ArrayExpression",["116"],"'useState' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'axios' is defined but never used.","'MoviesContainer' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["117"],"'list' is assigned a value but never used.","Assignments to the 'list' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","no-global-assign","no-unsafe-negation",{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},"Update the dependencies array to be: [props.loading]",{"range":"122","text":"123"},"Update the dependencies array to be: [props]",{"range":"124","text":"125"},[736,738],"[props.loading]",[665,667],"[props]"]